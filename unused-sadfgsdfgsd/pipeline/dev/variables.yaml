# YAML anchors
shared:
  # Task : connect on vault API with approle and generate a token from it.
  # Also provide some extra vars like external_worker_image for terraform
  - &extract-vars
    task: extract-vars
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: cycloid/cycloid-toolkit
          tag: latest
      run:
        path: /usr/bin/vault-approle-login
      outputs:
      - name: extracted-vars
        path: extracted-vars
    params:
      VAULT_ROLEID: ((vault.role_id))
      VAULT_SECRETID: ((vault.secret_id))
      VARS_TF_PATH: extracted-vars/terraform.tfvars

  # Task : sync and merge with rsync 2 rep. Used to merge stack and config
  - &merge-stack-and-config
    platform: linux
    image_resource:
      type: docker-image
      source:
        repository: cycloid/cycloid-toolkit
        tag: latest
    run:
      path: /usr/bin/merge-stack-and-config
    outputs:
    - name: merged-stack
      path: "merged-stack"


groups:

- name: overview
  jobs:
#      - code-validation
#      - build
  - unittest - concourse
  - deployment - terraform
  - post-deployment - ansible
  - functional-tests - concourse


- name: destroy
  jobs:
  - terraform-destroy
  - reject-lock

resource_types:

- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: '0.11.14'

- name: build-metadata-resource
  type: docker-image
  source:
    repository: mastertinner/build-metadata-resource
    tag: latest

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

- name: cycloid-events
  type: docker-image
  source:
    repository: cycloid/cycloid-events-resource
    tag: latest

- name: approval
  type: docker-image
  source:
    repository: cycloid/approval-resource
    tag: latest

resources:

- name: approval
  type: approval
  source:
    AWS_ACCESS_KEY_ID: ((approval_aws_access_key))
    AWS_DEFAULT_REGION: ((aws_default_region))
    AWS_SECRET_ACCESS_KEY: ((approval_aws_secret_key))
    pool: ((customer))-((project))

- name: cycloid-events
  type: cycloid-events
  source:
    api_login: ((api_login))
    api_password: ((api_password))
    api_url: 'https://http-api.cycloid.io'
    icon: fa-code-branch
    organization: ((customer))
    severity: info
    type: Custom
    tags:
      - key: project
        value: ((project))
      - key: env
        value: ((env))
  icon: calendar

- name: build-metadata
  type: build-metadata-resource
  #check_every: 24h
  icon: settings

- name: slack-alert
  type: slack-notification
  source:
    url: ((slack_hook))
  icon: slack

- name: 1h
  type: time
  source: {interval: 60m}
  icon: timer

# Terraform by itself
- name: terraform
  type: terraform
  source:
    storage:
      bucket: ((terraform_storage_bucket_name))
      bucket_path: ((terraform_storage_bucket_path))
      region_name: ((aws_default_region))
      access_key_id: ((aws_access_key))
      secret_access_key: ((aws_secret_key))
    vars:
      access_key: ((aws_access_key))
      secret_key: ((aws_secret_key))
      aws_region: ((aws_default_region))
      env: ((env))
      customer: ((customer))
      project: ((project))
    env:
      AWS_ACCESS_KEY_ID: ((aws_access_key))
      AWS_DEFAULT_REGION: ((aws_default_region))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_key))
  icon: terraform

# The Terraform stack (will be merged with the config)
- name: stack
  type: git
  source:
    uri: ((sc_repository))
    branch: ((sc_branch))
    private_key: ((sc_git_key))
    paths:
      - ((sc_path))/default/terraform/*
  icon: git

# The Terraform config (will be merged with the stack)
- name: config
  type: git
  source:
    uri: ((config_git_repository))
    branch: ((config_git_branch))
    private_key: ((config_git_key))
    paths:
      - ((config_terraform_path))/*
  icon: git

jobs:

- name: reject-lock
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
    - do:
      - get: approval
        trigger: false
        params:
          lock_name: ((customer))-((project))-((env))
          need_approval: true
      ensure:
        put: approval
        params:
          action: release
          lock_name: ((customer))-((project))-((env))

# Merge and trigger a plan whenever there is a commit in Terraform stack or config
- name: unittest - concourse
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
    - do:
      - get: stack
        trigger: true
      - get: config
        trigger: true

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: config
            path: "config"
          - name: stack
            path: "stack"
        params:
          CONFIG_PATH: ((config_terraform_path))
          STACK_PATH: ((sc_path))/default/terraform

      - *extract-vars

      - put: terraform
        params:
          env_name: ((project))-((env))
          plan_only: true
          terraform_source: merged-stack/
          var_files:
              - extracted-vars/terraform.tfvars
      on_success:
        do:
          - put: approval
            params:
              action: claim
              lock_name: ((customer))-((project))-((env))
              need_approval: true
              override_approval: true


# Merge and trigger an apply manually (no autostart of this job)
- name: deployment - terraform
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
    - do:
      - get: approval
        passed:
          - unittest - concourse
        trigger: true
        params:
          lock_name: ((customer))-((project))-((env))
          need_approval: true
      - get: stack
        trigger: false
        passed:
          - unittest - concourse
      - get: config
        trigger: false
        passed:
          - unittest - concourse
      - get: terraform
        trigger: false
        passed:
          - unittest - concourse

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: config
            path: "config"
          - name: stack
            path: "stack"
        params:
          CONFIG_PATH: ((config_terraform_path))
          STACK_PATH: ((sc_path))/default/terraform

      - *extract-vars

      - put: terraform
        params:
          env_name: ((project))-((env))
          run_plan: true
          terraform_source: merged-stack/
          var_files:
              - extracted-vars/terraform.tfvars
      ensure:
        put: approval
        params:
          action: release
          lock_name: ((customer))-((project))-((env))


- name: post-deployment - ansible
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
    - do:
      - get: terraform
        passed:
          - deployment - terraform
        trigger: true
      - task: db-migrate
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: cycloid/cycloid-toolkit
          container_limits: {}
          run:
            path: /bin/bash
            args:
              - '-c'
              - |
                echo "running db migration ..."


      - task: configure project backends
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: cycloid/cycloid-toolkit
          container_limits: {}
          run:
            path: /bin/bash
            args:
              - '-xc'
              - |
                TOKEN=$(python /usr/bin/get-cycloid-token)

                CREDS=$(curl -s -XGET "${API_URL}/organizations/$ORGANIZATION/credentials?page_index=1&page_size=1000" \
                -H "authorization: Bearer ${TOKEN}" \
                -H 'content-type: application/vnd.cycloid.io.v1+json' \
                -H 'Accept: */*' -H 'Connection: keep-alive' | jq -r '.data[] | "\(.id) \(.path)\\n"')

                AWS_CRED_ID="$(echo -e $CREDS | awk '/'"$EXTERNAL_BACKEND_AWS_CRED_NAME"'$/{print $1}')"
                if [[ -z "$AWS_CRED_ID" ]]; then
                    echo "error, cred : $EXTERNAL_BACKEND_AWS_CRED_NAME not found"
                    exit 1
                fi

                echo "Configuring infraView:"
                return_code=$(curl -s -o output -w "%{http_code}" "${API_URL}/organizations/$ORGANIZATION/external_backends" --compressed \
                -H "authorization: Bearer ${TOKEN}" \
                -H 'content-type: application/vnd.cycloid.io.v1+json' \
                -H 'Accept: */*' -H 'Connection: keep-alive' \
                --data-binary '{"purpose":"remote_tfstate","project_canonical":"'"$PROJECT"'","environment_canonical":"'"$ENV"'","credential_id":'"$AWS_CRED_ID"',"configuration":{"region":"eu-west-1","bucket":"'"$BUCKET_NAME"'","key":"'"$BUCKET_PATH/${PROJECT}-${ENV}.tfstate"'","engine":"AWSRemoteTFState"}}')

                if [[ "$return_code" != "200" ]]; then
                    echo "error, return code $return_code"
                    cat output
                    exit 1
                fi

                echo "Configuring logs:"
                return_code=$(curl -s -o output -w "%{http_code}" "${API_URL}/organizations/$ORGANIZATION/external_backends" --compressed \
                -H "authorization: Bearer ${TOKEN}" \
                -H 'content-type: application/vnd.cycloid.io.v1+json' \
                -H 'Accept: */*' -H 'Connection: keep-alive' \
                --data-binary '{"purpose":"logs","credential_id":'"$AWS_CRED_ID"',"project_canonical":"'"$PROJECT"'","configuration":{"region":"eu-west-1","engine":"AWSCloudWatchLogs"}}')

                if [[ "$return_code" != "200" ]]; then
                    echo "error, return code $return_code"
                    cat output
                    exit 1
                fi

          params:
            API_URL: 'https://http-api.cycloid.io'
            ORGANIZATION: ((customer))
            PASSWORD: ((api_password))
            USERNAME: ((api_login))
            ENV: ((env))
            PROJECT: ((project))
            BUCKET_PATH: ((terraform_storage_bucket_path))
            BUCKET_NAME: ((terraform_storage_bucket_name))
            EXTERNAL_BACKEND_AWS_CRED_NAME: ((external_backend_aws_cred_name))

- name: functional-tests - concourse
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
    - do:
      - get: terraform
        passed:
          - post-deployment - ansible
        trigger: true
      - task: extract-url
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: cycloid/cycloid-toolkit
          container_limits: {}
          run:
            path: /bin/bash
            args:
              - '-c'
              - |
                python -c "import json; print('\n'.join([ '%s=%s' % (k,v) for k, v in json.load(open('terraform/metadata', 'r')).items()]))" | tee slack-env/env
                python -c "import json; print('\n'.join([ '%s: %s' % (k,v) for k, v in json.load(open('terraform/metadata', 'r')).items()]))" | tee slack-env/env.yml
          outputs:
          - name: slack-env
          inputs:
          - name: terraform
      - task: wait-a-bit
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: cycloid/cycloid-toolkit
          run:
            path: /bin/sh
            args:
              - '-exc'
              - |
                source slack-env/env
                echo "Waiting for $address"
                timeout -t 300 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://'$address')" != "200" ]]; do sleep 5 && echo .; done'
          inputs:
          - name: slack-env
      on_success:
        do:
          - put: slack-alert
            params:
              env_file: slack-env/env
              attachments:
                - author_link: 'https://www.cycloid.io/'
                  author_name: cycloid.io
                  color: good
                  fallback: 'Wordpress deployed'
                  fields:
                    - short: true
                      title: Project
                      value: ((project))
                    - short: true
                      title: Environment
                      value: ((env))
                  pretext: Wordpress deployment success
                  title: '[SUCCESS]'
                  title_link: 'https://console.cycloid.io/projects/((customer))/((project))/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_ID'
                  text: |
                    Wordpress url :
                    http://$address
          - put: cycloid-events
            params:
              vars_file: slack-env/env.yml
              severity: info
              message: |
                       The project ((project)) on ((env)) environment have been deployed
                       </br>
                       <ul>
                       <li><em><a target="_blank" href="http://$address">Access to the application</a></em></li>
                       </ul>
              title: Success deployment of ((project)) on ((env)) environment


# Merge and trigger a destroy of the stack (no autostart of this job)
- name: terraform-destroy
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
    - do:
      - get: stack
        trigger: false
      - get: build-metadata
      - get: config
        trigger: false
      # In case of fail, it will help to retry every 1h to make sure the terraform is destroyed
      - get: 1h
        trigger: true
      - get: terraform
        passed:
          - unittest - concourse
        trigger: true
      - task: wait-a-bit
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: cycloid/cycloid-toolkit
          run:
            path: /bin/sh
            args:
              - '-ec'
              - |
                # Make this task wait a bit before a trigger of terraform destroy. 30min should be enough
                sleep 1800
      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: config
            path: "config"
          - name: stack
            path: "stack"
        params:
          CONFIG_PATH: ((config_terraform_path))
          STACK_PATH: ((sc_path))/default/terraform

      - *extract-vars

      - put: terraform
        params:
          action: destroy
          env_name: ((project))-((env))
          terraform_source: merged-stack/
          var_files:
              - extracted-vars/terraform.tfvars
        get_params:
          action: destroy
      - task: pipeline-cleanup
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: cycloid/cycloid-toolkit
          container_limits: {}
          run:
            path: /bin/bash
            args:
              - '-c'
              - |
                TOKEN=$(python /usr/bin/get-cycloid-token)

                # Pause the start/stop pipeline if created (ignore failure if not created)
                return_code=$(curl -s -o /dev/null -w "%{http_code}" -XPUT "${API_URL}/organizations/$ORGANIZATION/projects/${PROJECT}/pipelines/start-stop-$(cat build-metadata/build-pipeline-name)/pause" \
                -H "authorization: Bearer ${TOKEN}" \
                -H 'content-type: application/vnd.cycloid.io.v1+json' \
                -H 'Accept: */*' -H 'Connection: keep-alive')

                # Pause the pipeline
                return_code=$(curl -s -o /dev/null -w "%{http_code}" -XPUT "${API_URL}/organizations/$ORGANIZATION/projects/${PROJECT}/pipelines/$(cat build-metadata/build-pipeline-name)/pause" \
                -H "authorization: Bearer ${TOKEN}" \
                -H 'content-type: application/vnd.cycloid.io.v1+json' \
                -H 'Accept: */*' -H 'Connection: keep-alive')

                if [[ "$return_code" != "204" ]]; then
                    echo "error, return code $return_code"
                    exit 1
                fi
          inputs:
          - name: build-metadata
        params:
          API_URL: 'https://http-api.cycloid.io'
          ORGANIZATION: ((customer))
          PASSWORD: ((api_password))
          USERNAME: ((api_login))
          PROJECT: ((project))

      on_failure:
        do:
          - put: slack-alert
            params:
              attachments:
                - author_link: 'https://www.cycloid.io/'
                  author_name: cycloid.io
                  color: danger
                  fallback: 'Fail to destroy demo project'
                  fields:
                    - short: true
                      title: Project
                      value: ((project))
                    - short: true
                      title: Environment
                      value: ((env))
                  pretext: Terraform destroy FAIL
                  title: '[FAIL]'
                  title_link: 'https://console.cycloid.io/projects/((customer))/((project))/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_ID'

